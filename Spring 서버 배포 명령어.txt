[ Amazon Linux에서의 Spring 서버 배포 가이드라인]


서버 환경 설정
① Java 설치 (Amazon Linux 2023은 기본적으로 corretto 사용 가능)
sudo dnf update -y
sudo dnf install java-17-amazon-corretto -y
sudo dnf install java-17-amazon-corretto-devel -y
java -version
javac -version

② Git 설치
sudo dnf install git -y


GitHub에서 Spring 프로젝트 클론 다운로드
git clone https://github.com/mmn1300/AWS_Practice.git
cd ./AWS_Practice

application.yml
application-prov.yml
application-test.yml
Dockerfile
docker-compose.yml
각 경로에 맞게 작성

자바 환경변수 설정
export JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto.x86_64
export PATH=$JAVA_HOME/bin:$PATH
echo 'export JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto.x86_64' >> ~/.bashrc
echo 'export PATH=$JAVA_HOME/bin:$PATH' >> ~/.bashrc
source ~/.bashrc



※ Docker 환경 실행

sudo dnf install -y docker

# 도커 서비스 시작 및 부팅 시 자동 시작 설정
sudo systemctl start docker
sudo systemctl enable docker

# 도커 그룹에 ec2-user 추가 (권한 문제 방지용)
sudo usermod -aG docker ec2-user

# 도커 컴포즈 설치 (최신 버전)
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# 설치 확인
docker --version
docker-compose --version

# 변경된 그룹 권한 적용 (로그아웃 후 재접속 필요)
newgrp docker

# docker로 이미지 빌드 및 배포
docker-compose up --build



Spring Boot 앱 빌드
(Gradle 프로젝트일 경우)
chmod +x ./gradlew
./gradlew clean build

gradle이 시스템에 설치되지 않은 경우
sudo dnf install -y unzip wget
wget https://services.gradle.org/distributions/gradle-8.5-bin.zip
unzip gradle-8.5-bin.zip
sudo mv gradle-8.5 /opt/gradle
export PATH=$PATH:/opt/gradle/bin
gradle --version
./gradlew build

빌드 중 ApplicationTests에서 무한 대기 현상 발생시
cd ./build/libs
JAR_NAME=$(ls -tr ./*.jar | grep -v "plain" | tail -n 1)
cd ../../
(SNAPSHOT-plain.jar 파일 자체를 실행대상에서 제외)
(위 방법 대신 AWS_Practice/build/libs 에서 직접 SNAPSHOT-plain.jar 파일을 삭제해도 됨)

메모리 부족으로 인한 빌드 무한 대기 현상 발생시 스왑 설정
sudo fallocate -l 2G /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
echo '/swapfile swap swap defaults 0 0' | sudo tee -a /etc/fstab


(Maven 프로젝트일 경우)
sudo dnf install maven -y
mvn package

빌드가 끝나면 build/libs/your-app.jar 또는 target/your-app.jar 파일이 생성 됨.


Spring Boot 실행
cd build/libs  # 또는 target
java -jar your-app.jar

Spring Boot가 정상 실행되면 다음과 같은 로그가 출력 됨
Tomcat started on port(s): 8080
Started Application in 5.123 seconds


브라우저에서 접속 확인
브라우저에서 아래 주소로 접속
http://<EC2 퍼블릭 IP>:8080


방화벽 문제 해결 (필요 시)

포트 8080 인바운드 규칙
유형: Custom TCP
포트 범위: 8080
소스: 0.0.0.0/0
